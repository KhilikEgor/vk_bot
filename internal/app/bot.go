package app

import (
	"context"
	"github.com/SevereCloud/vksdk/v2/object"
	"math/rand"
	"os"
	"os/signal"
	"strings"
	"time"
	"vk_bot/internal/config"
	internalEvents "vk_bot/internal/events"
	"vk_bot/internal/logger"
	utils2 "vk_bot/internal/utils"

	"github.com/SevereCloud/vksdk/v2/api"
	"github.com/SevereCloud/vksdk/v2/events"
	"github.com/SevereCloud/vksdk/v2/longpoll-bot"
	"github.com/spf13/pflag"
)

var choices = []string{"–ö–∞–º–µ–Ω—å", "–ù–æ–∂–Ω–∏—Ü—ã", "–ë—É–º–∞–≥–∞"}

func getRandomChoice([]string) string {
	rand.Seed(time.Now().UnixNano())
	return choices[rand.Intn(len(choices))]
}

// Bot struct.
type Bot struct {
	client *api.VK
	conf   *config.Configuration

	commandPrefixes []string

	FuncList
}

// New –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä Bot.
func New() *Bot {
	filePath := pflag.String("config-path", "", "Path to config file")
	vkToken := pflag.String("vk-token", "", "VK API Token")
	pflag.Parse()

	conf, err := config.NewConf(*filePath)
	if err != nil {
		logger.Message{Message: "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", Err: err}.Panic()
	}

	conf.Conf.SetDefault(config.VkToken, vkToken)

	funcList := FuncList{
		FuncList:        *events.NewFuncList(),
		commandHandlers: map[string][]CommandHandler{},
	}

	funcList.MessageNew(func(ctx context.Context, object events.MessageNewObject) {
		bot := ExtractBotTx(ctx)
		message := "/" + object.Message.Text

		if bot.IsCommand(message) {
			args := strings.Split(message[1:], " ")
			funcList.HandleCommand(ctx, internalEvents.CommandNew{
				Command:   args[0],
				Arguments: args[1:],
				Object:    object,
			})
		}
	})

	funcList.MessageNew(func(ctx context.Context, object events.MessageNewObject) {
		bot := ExtractBotTx(ctx)

		payload := object.Message.Payload
		if bot.IsCommand(payload) {
			args := strings.Split(payload[1:], " ")
			funcList.HandleCommand(ctx, internalEvents.CommandNew{
				Command:   args[0],
				Arguments: args[1:],
				Object:    object,
			})
		}
	})

	return &Bot{
		client:   api.NewVK(conf.Conf.GetString(config.VkToken)),
		conf:     conf,
		FuncList: funcList,

		commandPrefixes: conf.Conf.GetStringSlice(config.VkCommandPrefix),
	}
}

// AddCommandPrefix –î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–µ—Ñ–∏–∫—Å –∫–æ–º–∞–Ω–¥ –≤ —Ä–∞–Ω—Ç–∞–π–º–µ.
func (b *Bot) AddCommandPrefix(prefix string) *Bot {
	b.commandPrefixes = append(b.commandPrefixes, prefix)

	return b
}

// GetCommandPrefixes –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–µ—Ñ–∏–∫—Å—ã –∫–æ–º–∞–Ω–¥.
func (b *Bot) GetCommandPrefixes() []string {
	return b.commandPrefixes
}

// GetClient –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç –í–ö.
func (b *Bot) GetClient() *api.VK {
	return b.client
}

// GetFuncList –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ —Ñ—É–Ω–∫—Ü–∏–π.
func (b *Bot) GetFuncList() *FuncList {
	return &b.FuncList
}

func (b *Bot) MessageIsCommand(message events.MessageNewObject) bool {
	return b.IsCommand(message.Message.Text) || b.IsCommand(message.Message.Payload)
}

// IsCommand –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π.
func (b *Bot) IsCommand(message string) bool {
	if len(message) > 1 {
		prefix := message[:1]
		for _, availablePrefix := range b.commandPrefixes {
			if prefix == availablePrefix {
				return true
			}
		}
	}

	return false
}

// SendMessage –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Ç.
func (b *Bot) SendMessage(chatId int, message string, params *api.Params) (messageId int, err error) {
	if params == nil {
		params = &api.Params{}
	}

	(*params)["message"] = message
	(*params)["peer_id"] = chatId
	(*params)["random_id"] = utils2.GetRandomMessageId()

	messageId, err = b.client.MessagesSend(*params)

	if err != nil {
		logger.Message{
			Message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è",
			Err:     err,
		}.AddField("peer_id", chatId).Error()
	}

	return messageId, err
}

// Polling –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ LongPoll —Å–µ—Ä–≤–µ—Ä–∞.
func (b *Bot) Polling() {
	logger.Message{Message: "–ó–∞–ø—É—Å–∫ LongPoll..."}.Info()

	lp, err := longpoll.NewLongPoll(b.client, b.conf.Conf.GetInt(config.VkGroupId))
	if err != nil {
		logger.Message{Message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ LongPoll —Å–µ—Ä–≤–µ—Ä–∞", Err: err}.Panic()
	}

	lp.FuncList = b.FuncList.FuncList

	lp.Goroutine(b.conf.Conf.GetBool(config.BotGoroutine))

	ctx := context.Background()
	ctx = context.WithValue(ctx, utils2.ContextKeyBot, b)

	var done bool
	go func() {
		err = lp.RunWithContext(ctx)
		done = true
	}()

	logger.Message{Message: "–†–∞–±–æ—Ç–∞—é"}.Info()

	ch := make(chan os.Signal, 1)
	signal.Notify(ch, os.Interrupt)

ctxWatcher:
	for {
		if done {
			lp.Shutdown()
			logger.Message{Message: "LongPoll –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É"}.Info()
			if err != nil && err.Error() != "context canceled" {
				logger.Message{Message: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏", Err: err}.Panic()
			}
		}

		select {
		case <-ch:
			logger.Message{Message: "–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"}.Info()
			lp.Shutdown()
			break ctxWatcher
		default:
			continue
		}
	}
}

func (b *Bot) HandleCommandForStart(humanCommand string, bot *Bot) {
	bot.GetFuncList().CommandNew(humanCommand, func(ctx context.Context, command internalEvents.CommandNew) {
		keyboard := object.NewMessagesKeyboard(true).
			AddRow().
			AddTextButton("–ö–∞–º–µ–Ω—å", "inline-keyboard", "positive").
			AddTextButton("–ù–æ–∂–Ω–∏—Ü—ã", "inline-keyboard", "positive").
			AddRow().
			AddTextButton("–ë—É–º–∞–≥–∞", "inline-keyboard", "positive").
			AddTextButton("–†–∞–Ω–¥–æ–º", "inline-keyboard", "positive")

		if humanCommand == "–ó–∞–Ω–æ–≤–æ" {
			_, _ = bot.SendMessage(command.Object.Message.PeerID, "–î–∞–≤–∞–π –µ—â–µ —Ä–∞–∑!", &api.Params{
				"keyboard": keyboard.ToJSON(),
			})
		} else {
			_, _ = bot.SendMessage(command.Object.Message.PeerID, "–ü—Ä–∏–≤–µ—Ç!‚úã", &api.Params{
				"keyboard": keyboard.ToJSON(),
			})
		}
	})
}

func (b *Bot) HandleCommandFor–°hoice(humanCommand string, bot *Bot) {
	bot.GetFuncList().CommandNew(humanCommand, func(ctx context.Context, command internalEvents.CommandNew) {
		keyboard := object.NewMessagesKeyboard(true).
			AddRow().
			AddTextButton("–ó–∞–Ω–æ–≤–æ", "inline-keyboard", "positive").
			AddTextButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å", "inline-keyboard", "negative")

		humanChoice := getRandomChoice(choices)
		if humanCommand != "–†–∞–Ω–¥–æ–º" {
			humanChoice = humanCommand
		}
		computerChoice := getRandomChoice(choices)
		if computerChoice == humanChoice {
			_, _ = bot.SendMessage(command.Object.Message.PeerID, "–ë–æ—Ç: "+computerChoice+"\n\n"+
				"–ß–µ–ª–æ–≤–µ–∫: "+humanChoice+"\n\n"+
				"–£ –≤–∞—Å –Ω–∏—á—å—è!ü§ù", &api.Params{
				"keyboard": keyboard.ToJSON(),
			})
		} else if computerChoice == "–ë—É–º–∞–≥–∞" && humanChoice == "–ù–æ–∂–Ω–∏—Ü—ã" ||
			computerChoice == "–ö–∞–º–µ–Ω—å" && humanChoice == "–ë—É–º–∞–≥–∞" ||
			computerChoice == "–ù–æ–∂–Ω–∏—Ü—ã" && humanChoice == "–ö–∞–º–µ–Ω—å" {
			_, _ = bot.SendMessage(command.Object.Message.PeerID, "–ë–æ—Ç: "+computerChoice+"\n\n"+
				"–ß–µ–ª–æ–≤–µ–∫: "+humanChoice+"\n\n"+
				"–¢—ã –ø–æ–±–µ–¥–∏–ª! üëäüëæ", &api.Params{
				"keyboard": keyboard.ToJSON(),
			})
		} else {
			_, _ = bot.SendMessage(command.Object.Message.PeerID, "–ë–æ—Ç: "+computerChoice+"\n\n"+
				"–ß–µ–ª–æ–≤–µ–∫: "+humanChoice+"\n\n"+
				"–ë–æ—Ç –≤—ã–∏–≥—Ä–∞–ª ü§ñ", &api.Params{
				"keyboard": keyboard.ToJSON(),
			})
		}

	})
}
